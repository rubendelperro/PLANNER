{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-12T08:35:05.212Z",
    "end": "2025-09-12T08:35:06.024Z",
    "duration": 812,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b70a8b03-cc8d-4a79-a1b8-4703f216bc1d",
      "title": "",
      "fullFile": "cypress\\e2e\\profile_management.cy.js",
      "file": "cypress\\e2e\\profile_management.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6bcd1d3-2e34-4bc4-b8d5-49d66a6fa8dc",
          "title": "Profile Management (CRUD)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create, read, update and delete a profile (happy path)",
              "fullTitle": "Profile Management (CRUD) should create, read, update and delete a profile (happy path)",
              "timedOut": null,
              "duration": 783,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Load fixture data for profile templates and build runtime values\ncy.fixture('profiles/e2e_user.json').then(f => {\n  const ts = Date.now();\n  const profileId = `${f.idPrefix}-${ts}`;\n  const initial = {\n    id: profileId,\n    name: `${f.initial.name} ${ts}`,\n    email: f.initial.emailTemplate.replace('{{ts}}', ts),\n    phone: f.initial.phone\n  };\n  const updated = _objectSpread(_objectSpread({}, initial), {}, {\n    name: `${f.initial.name} ${f.updated.nameSuffix} ${ts}`,\n    email: f.updated.emailTemplate.replace('{{ts}}', ts)\n  });\n  // CREATE\n  cy.createProfile(initial).then(saved => {\n    expect(saved, 'profile created').to.exist;\n    expect(saved.name).to.equal(initial.name);\n    expect(saved.email).to.equal(initial.email);\n  });\n  // READ (list)\n  cy.getState().then(state => {\n    const list = state.profiles && state.profiles.allIds;\n    expect(list, 'profiles list exists').to.be.an('array');\n    expect(list).to.include(profileId);\n  });\n  // UPDATE\n  cy.updateProfile(updated).then(saved => {\n    expect(saved, 'profile updated').to.exist;\n    expect(saved.name).to.equal(updated.name);\n    expect(saved.email).to.equal(updated.email);\n  });\n  // DELETE\n  cy.deleteProfile(profileId).then(deleted => {\n    expect(deleted, 'profile deleted').to.be.true;\n  });\n  // final check: profile absent (assert directly against state to avoid cached getter issues)\n  cy.getState().then(state => {\n    const saved = state && state.profiles && state.profiles.byId && state.profiles.byId[profileId];\n    expect(saved, 'profile removed from state').to.not.exist;\n    const list = state.profiles && state.profiles.allIds;\n    if (Array.isArray(list)) expect(list).to.not.include(profileId);\n  });\n});",
              "err": {},
              "uuid": "effef0fb-e98a-47d1-aa2d-f44a26d804e2",
              "parentUUID": "a6bcd1d3-2e34-4bc4-b8d5-49d66a6fa8dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "effef0fb-e98a-47d1-aa2d-f44a26d804e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 783,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "profile_management_report",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "reportFilename": "profile_management_report",
        "overwrite": true,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}